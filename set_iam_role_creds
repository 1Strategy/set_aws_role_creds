#!/usr/bin/env bash
#
# Copyright 2016 Doug Ireton
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Use the aws cli to assume an IAM role and create a ~/.aws/credentials profile
# for Terraform to use.
# Depends on jq and the AWS cli

set -o errexit
set -o nounset
set -o pipefail

# AWS IAM user and config profile to use
declare -r user='jane'
declare -r profile='development'

# Temporary file to hold AccessKeyId, SecretAccessKey, and SessionToken returned
# from 'aws sts assume-role' command.
declare -r creds_file=~/.aws/"${user}".json

aws sts assume-role --role-arn $(aws configure get role_arn --profile "${profile}") --role-session-name "${user}" --query "Credentials" > "${creds_file}"

aws_access_key_id=$(cat "${creds_file}"|jq -r .AccessKeyId)
aws_secret_access_key=$(cat "${creds_file}"|jq -r .SecretAccessKey)
aws_session_token=$(cat "${creds_file}"|jq -r .SessionToken)

# delete temporary .json file
[[ -f "${creds_file}" ]] && rm "${creds_file}"

aws configure set aws_access_key_id "${aws_access_key_id}" --profile "${profile}"
aws configure set aws_secret_access_key "${aws_secret_access_key}" --profile "${profile}"
aws configure set aws_session_token "${aws_session_token}" --profile "${profile}"

echo "The '"${profile}"' profile has been updated in ~/.aws/credentials."
